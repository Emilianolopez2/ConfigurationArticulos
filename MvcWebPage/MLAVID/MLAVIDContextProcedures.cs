// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using MvcWebPage.MLAVID;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace MvcWebPage.MLAVID
{
    public partial class MLAVIDContext
    {
        private IMLAVIDContextProcedures _procedures;

        public virtual IMLAVIDContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MLAVIDContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMLAVIDContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IT_ART_PROVResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_DEPARTAMENTOResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_DETALLESINVResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_LOGINResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_PEDIDOSResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_PEDIDOS_AUTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_PEDIDOS_AUT_DETResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_PEDIDOS_AUTPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_PEDIDOS_CAB2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_SELECCIONAR_ARTICULOSResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_SELECT_MODResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IT_USUARIOSResult>().HasNoKey().ToView(null);
        }
    }

    public partial class MLAVIDContextProcedures : IMLAVIDContextProcedures
    {
        private readonly MLAVIDContext _context;

        public MLAVIDContextProcedures(MLAVIDContext context)
        {
            _context = context;
        }

        public virtual async Task<List<IT_ART_PROVResult>> IT_ART_PROVAsync(string REFERENCIA, string CODALMACEN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "REFERENCIA",
                    Size = 100,
                    Value = REFERENCIA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CODALMACEN",
                    Size = 6,
                    Value = CODALMACEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_ART_PROVResult>("EXEC @returnValue = [dbo].[IT_ART_PROV] @REFERENCIA, @CODALMACEN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_DEPARTAMENTOResult>> IT_DEPARTAMENTOAsync(string CODALMACEN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CODALMACEN",
                    Size = 6,
                    Value = CODALMACEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_DEPARTAMENTOResult>("EXEC @returnValue = [dbo].[IT_DEPARTAMENTO] @CODALMACEN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_DETALLESINVResult>> IT_DETALLESINVAsync(string OD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OD",
                    Size = 6,
                    Value = OD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_DETALLESINVResult>("EXEC @returnValue = [dbo].[IT_DETALLESINV] @OD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_LOGINResult>> IT_LOGINAsync(string USUARIO, string PASSWORD, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "USUARIO",
                    Size = 510,
                    Value = USUARIO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PASSWORD",
                    Size = 80,
                    Value = PASSWORD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_LOGINResult>("EXEC @returnValue = [dbo].[IT_LOGIN] @USUARIO, @PASSWORD", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_PEDIDOSResult>> IT_PEDIDOSAsync(string CODALMACEN, short? DPTO, int? year, int? month, int? day, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CODALMACEN",
                    Size = 6,
                    Value = CODALMACEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DPTO",
                    Value = DPTO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "day",
                    Value = day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_PEDIDOSResult>("EXEC @returnValue = [dbo].[IT_PEDIDOS] @CODALMACEN, @DPTO, @year, @month, @day", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_PEDIDOS_AUTResult>> IT_PEDIDOS_AUTAsync(string CODALMACEN, string NOMPROVEEDOR, int? year1, int? month1, int? day1, int? year2, int? month2, int? day2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CODALMACEN",
                    Size = 6,
                    Value = CODALMACEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NOMPROVEEDOR",
                    Size = 510,
                    Value = NOMPROVEEDOR ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "year1",
                    Value = year1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month1",
                    Value = month1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "day1",
                    Value = day1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "year2",
                    Value = year2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month2",
                    Value = month2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "day2",
                    Value = day2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_PEDIDOS_AUTResult>("EXEC @returnValue = [dbo].[IT_PEDIDOS_AUT] @CODALMACEN, @NOMPROVEEDOR, @year1, @month1, @day1, @year2, @month2, @day2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_PEDIDOS_AUT_DETResult>> IT_PEDIDOS_AUT_DETAsync(int? ID_CAB, string NUMSERIE, int? NUMPEDIDO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID_CAB",
                    Value = ID_CAB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NUMSERIE",
                    Size = 8,
                    Value = NUMSERIE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NUMPEDIDO",
                    Value = NUMPEDIDO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_PEDIDOS_AUT_DETResult>("EXEC @returnValue = [dbo].[IT_PEDIDOS_AUT_DET] @ID_CAB, @NUMSERIE, @NUMPEDIDO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_PEDIDOS_AUTPResult>> IT_PEDIDOS_AUTPAsync(string CODALMACEN, int? IDESTADO, int? year1, int? month1, int? day1, int? year2, int? month2, int? day2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CODALMACEN",
                    Size = 6,
                    Value = CODALMACEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDESTADO",
                    Value = IDESTADO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "year1",
                    Value = year1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month1",
                    Value = month1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "day1",
                    Value = day1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "year2",
                    Value = year2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month2",
                    Value = month2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "day2",
                    Value = day2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_PEDIDOS_AUTPResult>("EXEC @returnValue = [dbo].[IT_PEDIDOS_AUTP] @CODALMACEN, @IDESTADO, @year1, @month1, @day1, @year2, @month2, @day2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_PEDIDOS_CAB2Result>> IT_PEDIDOS_CAB2Async(string CODALMACEN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CODALMACEN",
                    Size = 6,
                    Value = CODALMACEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_PEDIDOS_CAB2Result>("EXEC @returnValue = [dbo].[IT_PEDIDOS_CAB2] @CODALMACEN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_SELECCIONAR_ARTICULOSResult>> IT_SELECCIONAR_ARTICULOSAsync(string IT_ART, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IT_ART",
                    Size = 6,
                    Value = IT_ART ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_SELECCIONAR_ARTICULOSResult>("EXEC @returnValue = [dbo].[IT_SELECCIONAR_ARTICULOS] @IT_ART", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_SELECT_MODResult>> IT_SELECT_MODAsync(string CODALMACEN, short? DPTO, int? year, int? month, int? day, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CODALMACEN",
                    Size = 6,
                    Value = CODALMACEN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DPTO",
                    Value = DPTO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "month",
                    Value = month ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "day",
                    Value = day ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_SELECT_MODResult>("EXEC @returnValue = [dbo].[IT_SELECT_MOD] @CODALMACEN, @DPTO, @year, @month, @day", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IT_USUARIOSResult>> IT_USUARIOSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IT_USUARIOSResult>("EXEC @returnValue = [dbo].[IT_USUARIOS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
